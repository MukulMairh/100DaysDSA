https://leetcode.com/problems/linked-list-cycle/submissions/1429634375/

/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */

/**
 * @param {ListNode} head
 * @return {boolean}
 */
function hasCycle(head) {
    if (head === null || head.next === null) {
        return false; // No cycle if the list is empty or has only one node
    }

    let slow = head;
    let fast = head;

    // Traverse the list
    while (fast !== null && fast.next !== null) {
        slow = slow.next; // Move slow pointer one step
        fast = fast.next.next; // Move fast pointer two steps

        // If slow and fast pointers meet, a cycle exists
        if (slow === fast) {
            return true;
        }
    }

    // If we reach here, there's no cycle
    return false;
}